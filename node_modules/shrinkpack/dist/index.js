"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.shrinkpack = void 0;
var promises_1 = require("fs/promises");
var path_1 = require("path");
var picocolors_1 = __importDefault(require("picocolors"));
var from_network_1 = require("./lib/from-network");
var get_lockfile_1 = require("./lib/get-lockfile");
var get_ssri_from_file_1 = require("./lib/get-ssri-from-file");
var get_time_between_1 = require("./lib/get-time-between");
var log_1 = require("./lib/log");
function shrinkpack(_a) {
    var directory = _a.directory;
    return __awaiter(this, void 0, void 0, function () {
        var startTime, _b, lockfilePath, lockfile, wrapDirPath, totalAdded, totalDeleted, wrapDirContents, requiredWrapDirContents, deletions, _c, _d, _i, key, record, name, scopelessName, resolved, wrapFileName, wrapFilePath, shortWrapFilePath, spec, isInWrapDir, isAlreadyWrapped, header, footer, integrity, _e, wrapDirContents_1, wrapDirContents_1_1, filename, filePath, shortPath, nextLockfile;
        var e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    startTime = new Date();
                    _b = (0, get_lockfile_1.getLockfile)(directory), lockfilePath = _b.lockfilePath, lockfile = _b.lockfile;
                    wrapDirPath = (0, path_1.join)(directory, 'node_shrinkpack');
                    totalAdded = 0;
                    totalDeleted = 0;
                    return [4 /*yield*/, (0, promises_1.mkdir)(wrapDirPath, { recursive: true })];
                case 1:
                    _g.sent();
                    return [4 /*yield*/, (0, promises_1.readdir)(wrapDirPath)];
                case 2:
                    wrapDirContents = _g.sent();
                    requiredWrapDirContents = {};
                    deletions = [];
                    _c = [];
                    for (_d in lockfile.packages)
                        _c.push(_d);
                    _i = 0;
                    _g.label = 3;
                case 3:
                    if (!(_i < _c.length)) return [3 /*break*/, 9];
                    key = _c[_i];
                    if (key === '')
                        return [3 /*break*/, 8];
                    if (!key.includes('node_modules'))
                        return [3 /*break*/, 8];
                    record = lockfile.packages[key];
                    if (record.link === true)
                        return [3 /*break*/, 8];
                    if (!record.resolved && !record.version)
                        return [3 /*break*/, 8];
                    name = key.replace(/^.*node_modules\//g, '');
                    scopelessName = name.replace(/^.+\//, '');
                    resolved = record.resolved ||
                        "https://registry.npmjs.org/".concat(name, "/-/").concat(scopelessName, "-").concat(record.version, ".tgz");
                    wrapFileName = "".concat(name.replace(/\//g, '_'), "-").concat(record.version, ".tar");
                    wrapFilePath = (0, path_1.join)(wrapDirPath, wrapFileName);
                    shortWrapFilePath = (0, path_1.relative)(directory, wrapFilePath);
                    spec = "".concat(name, "@").concat(record.version);
                    isInWrapDir = wrapDirContents.includes(wrapFileName);
                    isAlreadyWrapped = resolved.includes('node_shrinkpack');
                    if (isAlreadyWrapped && !isInWrapDir) {
                        header = "".concat(spec, " points to ").concat(resolved, " which is missing");
                        footer = "delete lockfile, reinstall, then run shrinkpack again";
                        log_1.log.error("".concat(header, "\n  ").concat(footer));
                        process.exit(1);
                    }
                    if (!isInWrapDir) return [3 /*break*/, 5];
                    return [4 /*yield*/, (0, get_ssri_from_file_1.getSsriFromFile)(wrapFilePath)];
                case 4:
                    _e = _g.sent();
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, (0, from_network_1.fromNetwork)(resolved, wrapFilePath)];
                case 6:
                    _e = _g.sent();
                    _g.label = 7;
                case 7:
                    integrity = _e;
                    if (!isInWrapDir) {
                        log_1.log.download(spec);
                        totalAdded++;
                    }
                    record.integrity = [record.integrity, integrity].filter(Boolean).join(' ');
                    record.resolved = "file:".concat(shortWrapFilePath);
                    requiredWrapDirContents[wrapFileName] = true;
                    _g.label = 8;
                case 8:
                    _i++;
                    return [3 /*break*/, 3];
                case 9:
                    try {
                        for (wrapDirContents_1 = __values(wrapDirContents), wrapDirContents_1_1 = wrapDirContents_1.next(); !wrapDirContents_1_1.done; wrapDirContents_1_1 = wrapDirContents_1.next()) {
                            filename = wrapDirContents_1_1.value;
                            if (!requiredWrapDirContents[filename]) {
                                filePath = (0, path_1.join)(wrapDirPath, filename);
                                shortPath = (0, path_1.relative)(directory, filePath);
                                log_1.log.deletion(shortPath);
                                deletions.push((0, promises_1.rm)(filePath));
                                totalDeleted++;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (wrapDirContents_1_1 && !wrapDirContents_1_1.done && (_f = wrapDirContents_1["return"])) _f.call(wrapDirContents_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    // this is ignored by npm >= 7
                    lockfile.dependencies = undefined;
                    nextLockfile = JSON.stringify(lockfile, null, 2);
                    return [4 /*yield*/, Promise.all([(0, promises_1.writeFile)(lockfilePath, nextLockfile), deletions])];
                case 10:
                    _g.sent();
                    console.log([
                        'shrinkpack',
                        picocolors_1["default"].green("+".concat(totalAdded)),
                        picocolors_1["default"].red("-".concat(totalDeleted)),
                        picocolors_1["default"].gray((0, get_time_between_1.getTimeBetween)(startTime, new Date())),
                    ].join(' '));
                    return [2 /*return*/];
            }
        });
    });
}
exports.shrinkpack = shrinkpack;
