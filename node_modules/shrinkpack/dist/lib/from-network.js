"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.fromNetwork = void 0;
var fs_1 = __importDefault(require("fs"));
var gunzip_maybe_1 = __importDefault(require("gunzip-maybe"));
var pacote_1 = __importDefault(require("pacote"));
var ssri_1 = __importDefault(require("ssri"));
var stream_1 = require("stream");
var log_1 = require("./log");
/**
 * Use npm's internal "pacote" package to fetch tarballs from npm. Pacote uses
 * npm's internal cache to minimise the amount of network activity.
 *
 * @param resolved https://registry.npmjs.org/shrinkpack/-/shrinkpack-0.18.1.tgz
 * @param filePath /Users/you/my-project/node_shrinkpack/shrinkpack-0.18.1.tar
 */
function fromNetwork(resolved, filePath) {
    return __awaiter(this, void 0, void 0, function () {
        var $integrity, $unzip, $write, pRequest, pWrite, pIntegrity, pSha512;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    $integrity = ssri_1["default"].integrityStream();
                    $unzip = (0, gunzip_maybe_1["default"])();
                    $write = fs_1["default"].createWriteStream(filePath);
                    pRequest = pacote_1["default"].tarball.stream(resolved, function ($download) {
                        return new Promise(function (resolve, reject) {
                            var $contents = resolved.endsWith('.tgz')
                                ? $download.pipe($unzip)
                                : $download;
                            $download.on('end', resolve);
                            $download.on('error', reject);
                            $contents.pipe(new stream_1.PassThrough()).pipe($write);
                            $contents.pipe(new stream_1.PassThrough()).pipe($integrity);
                            $integrity.on('data', function () {
                                /* subscribe so stream runs */
                            });
                        });
                    });
                    pWrite = new Promise(function (resolve) {
                        $write.on('finish', function () {
                            log_1.log.verbose("finished writing ".concat(resolved, " to ").concat(filePath));
                            resolve();
                        });
                        $write.on('error', function (err) {
                            log_1.log.error("error writing ".concat(resolved, " to ").concat(filePath), err);
                            process.exit(1);
                        });
                    });
                    pIntegrity = new Promise(function (resolve) {
                        $integrity.on('finish', function () {
                            log_1.log.verbose("finished getting integrity hash of ".concat(filePath));
                            resolve();
                        });
                        $integrity.on('error', function (err) {
                            log_1.log.error("error getting integrity hash of ".concat(filePath), err);
                            process.exit(1);
                        });
                    });
                    pSha512 = new Promise(function (resolve) {
                        $integrity.on('integrity', function (result) {
                            var integrity = ssri_1["default"].parse(result.sha512[0]).toString();
                            log_1.log.verbose("integrity of ".concat(resolved, " is ").concat(integrity));
                            resolve(integrity);
                        });
                    });
                    return [4 /*yield*/, Promise.all([pRequest, pIntegrity, pWrite, pSha512])];
                case 1:
                    _a.sent();
                    return [2 /*return*/, pSha512];
            }
        });
    });
}
exports.fromNetwork = fromNetwork;
